import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO

# Thi·∫øt l·∫≠p trang r·ªông h∆°n cho giao di·ªán
st.set_page_config(layout="wide")

@st.cache_data # Cache ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô khi t·∫£i l·∫°i m√† file kh√¥ng ƒë·ªïi, n·∫øu file kh√¥ng thay ƒë·ªïi
def load_excel(uploaded_file_obj):
    """
    H√†m t·∫£i v√† ƒë·ªçc m·ªôt file Excel c·ª• th·ªÉ, x·ª≠ l√Ω c√°c ƒë·ªãnh d·∫°ng .xls v√† .xlsx.
    """
    if uploaded_file_obj is not None:
        try:
            file_name = uploaded_file_obj.name
            if file_name.endswith('.xlsx'):
                return pd.read_excel(uploaded_file_obj, engine='openpyxl')
            elif file_name.endswith('.xls'):
                # C·ªë g·∫Øng ƒë·ªçc .xls, n·∫øu l·ªói th√¨ th·ª≠ l·∫°i v·ªõi engine 'xlrd'
                try:
                    return pd.read_excel(uploaded_file_obj)
                except Exception as e_xls:
                    st.warning(f"L·ªói khi ƒë·ªçc file .xls {file_name} v·ªõi engine m·∫∑c ƒë·ªãnh: {e_xls}. ƒêang th·ª≠ v·ªõi xlrd...")
                    try:
                        return pd.read_excel(uploaded_file_obj, engine='xlrd')
                    except Exception as e_xlrd:
                        st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file .xls {file_name} v·ªõi xlrd: {e_xlrd}")
                        return None
            else: # ƒê·ªëi v·ªõi c√°c ƒë·ªãnh d·∫°ng kh√°c ho·∫∑c kh√¥ng c√≥ ƒëu√¥i r√µ r√†ng, th·ª≠ ƒë·ªçc m·∫∑c ƒë·ªãnh
                return pd.read_excel(uploaded_file_obj)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file {uploaded_file_obj.name}: {e}")
            return None
    return None

@st.cache_data # Cache ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô khi t·∫£i l·∫°i m√† c√°c file kh√¥ng ƒë·ªïi
def load_multiple_excel(uploaded_file_objs):
    """
    H√†m t·∫£i v√† ƒë·ªçc nhi·ªÅu file Excel, sau ƒë√≥ gh√©p (concatenate) ch√∫ng l·∫°i th√†nh m·ªôt DataFrame duy nh·∫•t.
    """
    if uploaded_file_objs:
        df_list = []
        for file_obj in uploaded_file_objs:
            df = load_excel(file_obj)
            if df is not None:
                df_list.append(df)
        if df_list:
            try:
                return pd.concat(df_list, ignore_index=True)
            except Exception as e:
                st.error(f"L·ªói khi gh√©p c√°c file Excel: {e}")
                return None
        return None # Tr·∫£ v·ªÅ None n·∫øu danh s√°ch df_list r·ªóng
    return None # Tr·∫£ v·ªÅ None n·∫øu kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c t·∫£i l√™n

def process_crm_data(
    df_crm4_raw, df_crm32_raw, df_muc_dich_data, df_code_tsbd_data,
    df_sol_data, df_giai_ngan_data, df_55_data, df_56_data, df_delay_data,
    chi_nhanh_filter, dia_ban_kt_filter
):
    """
    H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω to√†n b·ªô d·ªØ li·ªáu CRM v√† t·∫°o ra c√°c b·∫£ng b√°o c√°o.
    """
    # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
    df_crm4 = df_crm4_raw.copy() if df_crm4_raw is not None else None
    df_crm32 = df_crm32_raw.copy() if df_crm32_raw is not None else None

    # Ki·ªÉm tra c√°c file d·ªØ li·ªáu b·∫Øt bu·ªôc
    if df_crm4 is None or df_crm32 is None:
        st.error("D·ªØ li·ªáu CRM4 ho·∫∑c CRM32 ch∆∞a ƒë∆∞·ª£c t·∫£i l√™n ho·∫∑c b·ªã l·ªói. Vui l√≤ng ki·ªÉm tra l·∫°i.")
        return None, None, None, None, None, None, None, None, None, None, None # Tr·∫£ v·ªÅ None cho t·∫•t c·∫£ k·∫øt qu·∫£

    st.info(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu cho chi nh√°nh: '{chi_nhanh_filter}' v√† ƒë·ªãa b√†n ki·ªÉm to√°n: '{dia_ban_kt_filter}'")

    # L·ªçc d·ªØ li·ªáu CRM4 v√† CRM32 theo chi nh√°nh (BRCD/BRANCH_VAY)
    df_crm4_filtered = df_crm4[df_crm4['BRANCH_VAY'].astype(str).str.upper().str.contains(chi_nhanh_filter)].copy()
    df_crm32_filtered = df_crm32[df_crm32['BRCD'].astype(str).str.upper().str.contains(chi_nhanh_filter)].copy()

    st.write(f"üìå S·ªë d√≤ng CRM4 sau khi l·ªçc theo chi nh√°nh '{chi_nhanh_filter}': **{len(df_crm4_filtered)}**")
    st.write(f"üìå S·ªë d√≤ng CRM32 sau khi l·ªçc theo chi nh√°nh '{chi_nhanh_filter}': **{len(df_crm32_filtered)}**")

    # X·ª≠ l√Ω th√¥ng tin Lo·∫°i TSBƒê t·ª´ file CODE_LOAI TSBD
    if df_code_tsbd_data is None:
        st.error("File CODE_LOAI TSBD ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c l·ªói. B·ªè qua x·ª≠ l√Ω lo·∫°i TSBƒê.")
        # Kh·ªüi t·∫°o c√°c DataFrame li√™n quan ƒë·ªÉ tr√°nh l·ªói
        df_crm4_filtered['LOAI_TS'] = None
        df_crm4_filtered['GHI_CHU_TSBD'] = None
        pivot_merge = pd.DataFrame(columns=['CIF_KH_VAY', 'GI√Å TR·ªä TS', 'D∆Ø N·ª¢'])
        pivot_final = pd.DataFrame(columns=['STT', 'CUSTTPCD', 'CIF_KH_VAY', 'TEN_KH_VAY', 'NHOM_NO'])
    else:
        df_code_tsbd = df_code_tsbd_data[['CODE CAP 2', 'CODE']].copy()
        df_code_tsbd.columns = ['CAP_2', 'LOAI_TS']
        df_tsbd_code = df_code_tsbd[['CAP_2', 'LOAI_TS']].drop_duplicates().copy()
        
        # ƒê·∫£m b·∫£o c·ªôt 'CAP_2' l√† string ƒë·ªÉ merge
        df_crm4_filtered['CAP_2'] = df_crm4_filtered['CAP_2'].astype(str)
        df_tsbd_code['CAP_2'] = df_tsbd_code['CAP_2'].astype(str)

        df_crm4_filtered = df_crm4_filtered.merge(df_tsbd_code, how='left', on='CAP_2')
        df_crm4_filtered['LOAI_TS'] = df_crm4_filtered.apply(
            lambda row: 'Kh√¥ng TS' if pd.isna(row['CAP_2']) or str(row['CAP_2']).strip() == '' else row['LOAI_TS'],
            axis=1
        )
        df_crm4_filtered['GHI_CHU_TSBD'] = df_crm4_filtered.apply(
            lambda row: 'M·ªöI' if pd.notna(row['CAP_2']) and str(row['CAP_2']).strip() != '' and pd.isna(row['LOAI_TS']) else '',
            axis=1
        )

        df_vay_4 = df_crm4_filtered.copy()
        df_vay = df_vay_4[~df_vay_4['LOAI'].isin(['Bao lanh', 'LC'])].copy()

        if not df_vay.empty:
            pivot_ts = df_vay.pivot_table(
                index='CIF_KH_VAY', columns='LOAI_TS', values='TS_KW_VND',
                aggfunc='sum', fill_value=0
            ).add_suffix(' (Gi√° tr·ªã TS)').reset_index()
            pivot_no = df_vay.pivot_table(
                index='CIF_KH_VAY', columns='LOAI_TS', values='DU_NO_PHAN_BO_QUY_DOI',
                aggfunc='sum', fill_value=0
            ).reset_index()

            # ƒê·∫£m b·∫£o CIF_KH_VAY l√† string ƒë·ªÉ merge
            pivot_no['CIF_KH_VAY'] = pivot_no['CIF_KH_VAY'].astype(str).str.strip()
            pivot_ts['CIF_KH_VAY'] = pivot_ts['CIF_KH_VAY'].astype(str).str.strip()

            pivot_merge = pivot_no.merge(pivot_ts, on='CIF_KH_VAY', how='left')
            ts_value_cols = [col for col in pivot_ts.columns if col.endswith(' (Gi√° tr·ªã TS)') and col != 'CIF_KH_VAY (Gi√° tr·ªã TS)']
            
            # S·ª≠ d·ª•ng .get() ƒë·ªÉ tr√°nh l·ªói n·∫øu c·ªôt kh√¥ng t·ªìn t·∫°i sau merge
            pivot_merge['GI√Å TR·ªä TS'] = pivot_merge.get(ts_value_cols, pd.DataFrame()).sum(axis=1) # Handle potential empty list
            
            du_no_cols = [col for col in pivot_no.columns if col != 'CIF_KH_VAY']
            pivot_merge['D∆Ø N·ª¢'] = pivot_merge.get(du_no_cols, pd.DataFrame()).sum(axis=1) # Handle potential empty list
        else:
            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu 'Cho vay' sau khi l·ªçc theo chi nh√°nh. B·∫£ng pivot TSBƒê c√≥ th·ªÉ r·ªóng.")
            pivot_merge = pd.DataFrame(columns=['CIF_KH_VAY', 'GI√Å TR·ªä TS', 'D∆Ø N·ª¢'])

        df_info = df_crm4_filtered[['CIF_KH_VAY', 'TEN_KH_VAY', 'CUSTTPCD', 'NHOM_NO']].drop_duplicates(subset='CIF_KH_VAY').copy()
        
        # ƒê·∫£m b·∫£o CIF_KH_VAY l√† string ƒë·ªÉ merge
        df_info['CIF_KH_VAY'] = df_info['CIF_KH_VAY'].astype(str).str.strip()
        pivot_merge['CIF_KH_VAY'] = pivot_merge['CIF_KH_VAY'].astype(str).str.strip()

        pivot_final = df_info.merge(pivot_merge, on='CIF_KH_VAY', how='left')
        pivot_final = pivot_final.reset_index().rename(columns={'index': 'STT'})
        pivot_final['STT'] += 1
        
        # ƒê·∫£m b·∫£o c√°c c·ªôt t·ªìn t·∫°i tr∆∞·ªõc khi s·∫Øp x·∫øp th·ª© t·ª±
        du_no_pivot_cols = [col for col in pivot_merge.columns if col not in ['CIF_KH_VAY', 'GI√Å TR·ªä TS', 'D∆Ø N·ª¢'] and '(Gi√° tr·ªã TS)' not in col]
        ts_value_pivot_cols = [col for col in pivot_merge.columns if '(Gi√° tr·ªã TS)' in col and col != 'CIF_KH_VAY']
        
        cols_order = ['STT', 'CUSTTPCD', 'CIF_KH_VAY', 'TEN_KH_VAY', 'NHOM_NO'] + \
                     sorted(du_no_pivot_cols) + sorted(ts_value_pivot_cols) + ['D∆Ø N·ª¢', 'GI√Å TR·ªä TS']
        
        # L·ªçc ra ch·ªâ c√°c c·ªôt th·ª±c s·ª± t·ªìn t·∫°i trong pivot_final
        cols_order_existing = [col for col in cols_order if col in pivot_final.columns]
        pivot_final = pivot_final[cols_order_existing]
        
    # X·ª≠ l√Ω th√¥ng tin v·ªÅ h·∫°n m·ª©c/c∆° c·∫•u n·ª£ t·ª´ CRM32
    df_crm32_filtered['MA_PHE_DUYET'] = df_crm32_filtered['CAP_PHE_DUYET'].astype(str).str.split('-').str[0].str.strip().str.zfill(2)
    ma_cap_c = [f"{i:02d}" for i in range(1, 8)] + [f"{i:02d}" for i in range(28, 32)]
    list_cif_cap_c = df_crm32_filtered[df_crm32_filtered['MA_PHE_DUYET'].isin(ma_cap_c)]['CUSTSEQLN'].unique().astype(str)
    list_co_cau = ['ACOV1', 'ACOV3', 'ATT01', 'ATT02', 'ATT03', 'ATT04',
                   'BCOV1', 'BCOV2', 'BTT01', 'BTT02', 'BTT03',
                   'CCOV2', 'CCOV3', 'CTT03', 'RCOV3', 'RTT03']
    cif_co_cau = df_crm32_filtered[df_crm32_filtered['SCHEME_CODE'].isin(list_co_cau)]['CUSTSEQLN'].unique().astype(str)

    # X·ª≠ l√Ω th√¥ng tin M·ª•c ƒë√≠ch s·ª≠ d·ª•ng v·ªën t·ª´ CODE_MDSDV4
    if df_muc_dich_data is None:
        st.error("File CODE_MDSDV4 ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c l·ªói. B·ªè qua x·ª≠ l√Ω m·ª•c ƒë√≠ch s·ª≠ d·ª•ng v·ªën.")
        pivot_mucdich = pd.DataFrame(columns=['CUSTSEQLN', 'D∆Ø N·ª¢ CRM32'])
    else:
        df_muc_dich_vay_src = df_muc_dich_data[['CODE_MDSDV4', 'GROUP']].copy()
        df_muc_dich_vay_src.columns = ['MUC_DICH_VAY_CAP_4', 'MUC DICH']
        df_muc_dich_map = df_muc_dich_vay_src[['MUC_DICH_VAY_CAP_4', 'MUC DICH']].drop_duplicates().copy()
        
        # ƒê·∫£m b·∫£o c·ªôt 'MUC_DICH_VAY_CAP_4' l√† string ƒë·ªÉ merge
        df_crm32_filtered['MUC_DICH_VAY_CAP_4'] = df_crm32_filtered['MUC_DICH_VAY_CAP_4'].astype(str)
        df_muc_dich_map['MUC_DICH_VAY_CAP_4'] = df_muc_dich_map['MUC_DICH_VAY_CAP_4'].astype(str)

        df_crm32_filtered = df_crm32_filtered.merge(df_muc_dich_map, how='left', on='MUC_DICH_VAY_CAP_4')
        df_crm32_filtered['MUC DICH'] = df_crm32_filtered['MUC DICH'].fillna('(blank)')
        df_crm32_filtered['GHI_CHU_MUC_DICH'] = df_crm32_filtered.apply(
            lambda row: 'M·ªöI' if pd.notna(row['MUC_DICH_VAY_CAP_4']) and str(row['MUC_DICH_VAY_CAP_4']).strip() != '' and pd.isna(row['MUC DICH']) and row['MUC DICH'] == '(blank)' else '',
            axis=1
        )
        pivot_mucdich = df_crm32_filtered.pivot_table(
            index='CUSTSEQLN', columns='MUC DICH', values='DU_NO_QUY_DOI',
            aggfunc='sum', fill_value=0
        ).reset_index()
        muc_dich_cols_for_sum = [col for col in pivot_mucdich.columns if col != 'CUSTSEQLN']
        pivot_mucdich['D∆Ø N·ª¢ CRM32'] = pivot_mucdich.get(muc_dich_cols_for_sum, pd.DataFrame()).sum(axis=1)
        pivot_mucdich['CUSTSEQLN'] = pivot_mucdich['CUSTSEQLN'].astype(str).str.strip()
        pivot_final_CRM32 = pivot_mucdich.rename(columns={'CUSTSEQLN': 'CIF_KH_VAY'})
    
    # ƒê·∫£m b·∫£o CIF_KH_VAY l√† string ƒë·ªÉ merge cho pivot_full
    pivot_final['CIF_KH_VAY'] = pivot_final['CIF_KH_VAY'].astype(str).str.strip()
    pivot_final_CRM32['CIF_KH_VAY'] = pivot_final_CRM32['CIF_KH_VAY'].astype(str).str.strip()
    
    pivot_full = pivot_final.merge(pivot_final_CRM32, on='CIF_KH_VAY', how='left')
    pivot_full.fillna(0, inplace=True) # ƒêi·ªÅn 0 cho c√°c gi√° tr·ªã NaN sau merge

    pivot_full['LECH'] = pivot_full['D∆Ø N·ª¢'] - pivot_full.get('D∆Ø N·ª¢ CRM32', 0)
    pivot_full['LECH'] = pivot_full['LECH'].fillna(0) # ƒê·∫£m b·∫£o LECH kh√¥ng c√≥ NaN

    # X·ª≠ l√Ω c√°c kho·∫£n d∆∞ n·ª£ blank (kh√¥ng c√≥ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng v·ªën)
    cif_lech = pivot_full[pivot_full['LECH'] != 0]['CIF_KH_VAY'].unique()
    df_crm4_blank = df_crm4_filtered[~df_crm4_filtered['LOAI'].isin(['Cho vay', 'Bao lanh', 'LC'])].copy()
    df_crm4_blank['CIF_KH_VAY'] = df_crm4_blank['CIF_KH_VAY'].astype(str).str.strip()

    if not df_crm4_blank.empty and cif_lech.size > 0 :
        du_no_bosung = (
            df_crm4_blank[df_crm4_blank['CIF_KH_VAY'].isin(cif_lech)]
            .groupby('CIF_KH_VAY', as_index=False)['DU_NO_PHAN_BO_QUY_DOI']
            .sum().rename(columns={'DU_NO_PHAN_BO_QUY_DOI': '(blank)'})
        )
        du_no_bosung['CIF_KH_VAY'] = du_no_bosung['CIF_KH_VAY'].astype(str).str.strip()
        pivot_full = pivot_full.merge(du_no_bosung, on='CIF_KH_VAY', how='left')
        pivot_full['(blank)'] = pivot_full['(blank)'].fillna(0)
        pivot_full['D∆Ø N·ª¢ CRM32'] = pivot_full.get('D∆Ø N·ª¢ CRM32', 0) + pivot_full['(blank)']
    else:
        pivot_full['(blank)'] = 0 # ƒê·∫£m b·∫£o c·ªôt (blank) lu√¥n t·ªìn t·∫°i
    
    # ƒê·∫£m b·∫£o th·ª© t·ª± c·ªôt n·∫øu '(blank)' c√≥
    cols = list(pivot_full.columns)
    if '(blank)' in cols and 'D∆Ø N·ª¢ CRM32' in cols:
        cols.insert(cols.index('D∆Ø N·ª¢ CRM32'), cols.pop(cols.index('(blank)')))
        pivot_full = pivot_full[cols]
    
    pivot_full['LECH'] = pivot_full['D∆Ø N·ª¢'] - pivot_full.get('D∆Ø N·ª¢ CRM32',0)

    # Th√™m c√°c c·ªôt v·ªÅ nh√≥m n·ª£, ph√™ duy·ªát c·∫•p C, n·ª£ c∆° c·∫•u
    pivot_full['NHOM_NO'] = pivot_full['NHOM_NO'].astype(str)
    pivot_full['N·ª£ nh√≥m 2'] = pivot_full['NHOM_NO'].apply(lambda x: 'x' if x.strip() == '2' or x.strip() == '2.0' else '')
    pivot_full['N·ª£ x·∫•u'] = pivot_full['NHOM_NO'].apply(lambda x: 'x' if x.strip() in ['3', '4', '5', '3.0', '4.0', '5.0'] else '')
    pivot_full['CIF_KH_VAY'] = pivot_full['CIF_KH_VAY'].astype(str).str.strip()
    
    list_cif_cap_c_str = [str(c).strip() for c in list_cif_cap_c]
    cif_co_cau_str = [str(c).strip() for c in cif_co_cau]
    
    pivot_full['Chuy√™n gia PD c·∫•p C duy·ªát'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in list_cif_cap_c_str else '')
    pivot_full['N·ª¢ C∆†_C·∫§U'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in cif_co_cau_str else '')

    # X·ª≠ l√Ω D∆∞ n·ª£ B·∫£o l√£nh v√† LC
    df_baolanh = df_crm4_filtered[df_crm4_filtered['LOAI'] == 'Bao lanh'].copy()
    df_lc = df_crm4_filtered[df_crm4_filtered['LOAI'] == 'LC'].copy()
    df_baolanh['CIF_KH_VAY'] = df_baolanh['CIF_KH_VAY'].astype(str).str.strip()
    df_lc['CIF_KH_VAY'] = df_lc['CIF_KH_VAY'].astype(str).str.strip()
    
    df_baolanh_sum = df_baolanh.groupby('CIF_KH_VAY', as_index=False)['DU_NO_PHAN_BO_QUY_DOI'].sum().rename(columns={'DU_NO_PHAN_BO_QUY_DOI': 'D∆Ø_N·ª¢_B·∫¢O_L√ÉNH'})
    df_lc_sum = df_lc.groupby('CIF_KH_VAY', as_index=False)['DU_NO_PHAN_BO_QUY_DOI'].sum().rename(columns={'DU_NO_PHAN_BO_QUY_DOI': 'D∆Ø_N·ª¢_LC'})
    
    pivot_full = pivot_full.merge(df_baolanh_sum, on='CIF_KH_VAY', how='left')
    pivot_full = pivot_full.merge(df_lc_sum, on='CIF_KH_VAY', how='left')
    pivot_full['D∆Ø_N·ª¢_B·∫¢O_L√ÉNH'] = pivot_full['D∆Ø_N·ª¢_B·∫¢O_L√ÉNH'].fillna(0)
    pivot_full['D∆Ø_N·ª¢_LC'] = pivot_full['D∆Ø_N·ª¢_LC'].fillna(0)

    # X·ª≠ l√Ω gi·∫£i ng√¢n ti·ªÅn m·∫∑t
    if df_giai_ngan_data is not None:
        df_giai_ngan = df_giai_ngan_data.copy()
        # ƒê·∫£m b·∫£o c√°c c·ªôt l√† string ƒë·ªÉ so s√°nh
        df_crm32_filtered['KHE_UOC'] = df_crm32_filtered['KHE_UOC'].astype(str).str.strip()
        df_crm32_filtered['CUSTSEQLN'] = df_crm32_filtered['CUSTSEQLN'].astype(str).str.strip()
        df_giai_ngan['FORACID'] = df_giai_ngan['FORACID'].astype(str).str.strip()
        
        df_match_gn = df_crm32_filtered[df_crm32_filtered['KHE_UOC'].isin(df_giai_ngan['FORACID'])].copy()
        ds_cif_tien_mat = df_match_gn['CUSTSEQLN'].unique()
        pivot_full['GI·∫¢I_NG√ÇN_TIEN_MAT'] = pivot_full['CIF_KH_VAY'].isin(ds_cif_tien_mat).map({True: 'x', False: ''})
    else:
        pivot_full['GI·∫¢I_NG√ÇN_TIEN_MAT'] = ''
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu gi·∫£i ng√¢n ti·ªÅn m·∫∑t ƒë·ªÉ x·ª≠ l√Ω.")

    # X·ª≠ l√Ω TSBƒê c·∫ßm c·ªë t·∫°i TCTD kh√°c
    df_crm4_filtered['CAP_2'] = df_crm4_filtered['CAP_2'].astype(str)
    df_cc_tctd = df_crm4_filtered[df_crm4_filtered['CAP_2'].str.contains('TCTD', case=False, na=False)].copy()
    df_cc_tctd['CIF_KH_VAY'] = df_cc_tctd['CIF_KH_VAY'].astype(str).str.strip()
    df_cc_flag = df_cc_tctd[['CIF_KH_VAY']].drop_duplicates().copy()
    df_cc_flag['C·∫ßm c·ªë t·∫°i TCTD kh√°c'] = 'x'
    pivot_full = pivot_full.merge(df_cc_flag, on='CIF_KH_VAY', how='left')
    pivot_full['C·∫ßm c·ªë t·∫°i TCTD kh√°c'] = pivot_full['C·∫ßm c·ªë t·∫°i TCTD kh√°c'].fillna('')

    # X·ª≠ l√Ω Top 10 d∆∞ n·ª£ KHCN/KHDN
    pivot_full['D∆Ø N·ª¢'] = pd.to_numeric(pivot_full['D∆Ø N·ª¢'], errors='coerce').fillna(0)
    pivot_full['CUSTTPCD'] = pivot_full['CUSTTPCD'].astype(str).str.strip().str.lower()
    
    top10_khcn_cif = pivot_full[pivot_full['CUSTTPCD'] == 'ca nhan'].nlargest(10, 'D∆Ø N·ª¢')['CIF_KH_VAY'].astype(str).str.strip().values
    pivot_full['Top 10 d∆∞ n·ª£ KHCN'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in top10_khcn_cif else '')
    
    top10_khdn_cif = pivot_full[pivot_full['CUSTTPCD'] == 'doanh nghiep'].nlargest(10, 'D∆Ø N·ª¢')['CIF_KH_VAY'].astype(str).str.strip().values
    pivot_full['Top 10 d∆∞ n·ª£ KHDN'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in top10_khdn_cif else '')

    # X·ª≠ l√Ω TSBƒê qu√° h·∫°n ƒë·ªãnh gi√°
    ngay_danh_gia_tsbd = pd.to_datetime("2025-03-31") # C√≥ th·ªÉ bi·∫øn th√†nh input t·ª´ ng∆∞·ªùi d√πng
    loai_ts_r34 = ['BƒêS', 'MMTB', 'PTVT']
    df_crm4_for_tsbd = df_crm4_filtered.copy() # df_crm4_for_tsbd ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a ·ªü ƒë√¢y
    
    df_crm4_for_tsbd['LOAI_TS'] = df_crm4_for_tsbd['LOAI_TS'].astype(str)
    mask_r34 = df_crm4_for_tsbd['LOAI_TS'].isin(loai_ts_r34)
    df_crm4_for_tsbd['VALUATION_DATE'] = pd.to_datetime(df_crm4_for_tsbd['VALUATION_DATE'], errors='coerce')
    
    df_crm4_for_tsbd.loc[mask_r34, 'SO_NGAY_QUA_HAN'] = (
        (ngay_danh_gia_tsbd - df_crm4_for_tsbd.loc[mask_r34, 'VALUATION_DATE']).dt.days - 365
    )
    
    cif_quahan_series = df_crm4_for_tsbd[
        (df_crm4_for_tsbd['SO_NGAY_QUA_HAN'].notna()) & (df_crm4_for_tsbd['SO_NGAY_QUA_HAN'] > 30)
    ]['CIF_KH_VAY']
    
    cif_quahan = cif_quahan_series.astype(str).str.strip().unique()
    pivot_full['KH c√≥ TSBƒê qu√° h·∫°n ƒë·ªãnh gi√°'] = pivot_full['CIF_KH_VAY'].apply(
        lambda x: 'x' if x in cif_quahan else ''
    )

    # --- B·∫Øt ƒë·∫ßu ph·∫ßn x·ª≠ l√Ω TSBƒê kh√°c ƒë·ªãa b√†n (ƒë√£ ƒëi·ªÅu ch·ªânh) ---
    df_bds_matched = pd.DataFrame() # Kh·ªüi t·∫°o r·ªóng ƒë·ªÉ tr√°nh l·ªói n·∫øu ƒëi·ªÅu ki·ªán kh√¥ng th·ªèa
    if df_sol_data is not None and dia_ban_kt_filter:
        df_sol = df_sol_data.copy()
        # ƒê·∫£m b·∫£o c√°c c·ªôt li√™n quan l√† string ƒë·ªÉ so s√°nh v√† x·ª≠ l√Ω
        df_crm4_filtered['SECU_SRL_NUM'] = df_crm4_filtered['SECU_SRL_NUM'].astype(str).str.strip()
        df_sol['C01'] = df_sol['C01'].astype(str).str.strip()
        df_sol['C02'] = df_sol['C02'].astype(str).str.strip()
        df_sol['C19'] = df_sol['C19'].astype(str) # C·ªôt ƒë·ªãa ch·ªâ

        ds_secu = df_crm4_filtered['SECU_SRL_NUM'].dropna().unique()
        df_17_filtered = df_sol[df_sol['C01'].isin(ds_secu)].copy()

        df_bds = df_17_filtered[df_17_filtered['C02'].str.strip() == 'Bat dong san'].copy()
        
        # ƒê·∫£m b·∫£o df_bds_matched ƒë∆∞·ª£c l·ªçc ƒë√∫ng v·ªõi SECU_SRL_NUM c·ªßa df_crm4_filtered
        df_bds_matched = df_bds[df_bds['C01'].isin(df_crm4_filtered['SECU_SRL_NUM'])].copy()

        def extract_tinh_thanh(diachi):
            if pd.isna(diachi): return ''
            parts = str(diachi).split(',') # Chuy·ªÉn sang string tr∆∞·ªõc khi split
            return parts[-1].strip().lower() if parts else ''

        df_bds_matched['TINH_TP_TSBD'] = df_bds_matched['C19'].apply(extract_tinh_thanh)
        df_bds_matched['CANH_BAO_TS_KHAC_DIABAN'] = df_bds_matched['TINH_TP_TSBD'].apply(
            lambda x: 'x' if x and x != dia_ban_kt_filter else '' # S·ª≠ d·ª•ng dia_ban_kt_filter tr·ª±c ti·∫øp
        )

        ma_ts_canh_bao = df_bds_matched[df_bds_matched['CANH_BAO_TS_KHAC_DIABAN'] == 'x']['C01'].unique()
        
        # L·∫•y CIF t·ª´ df_crm4_filtered ƒë·ªÉ ƒë·∫£m b·∫£o ƒë√£ l·ªçc theo chi nh√°nh
        cif_canh_bao_series = df_crm4_filtered[df_crm4_filtered['SECU_SRL_NUM'].isin(ma_ts_canh_bao)]['CIF_KH_VAY']
        cif_canh_bao = cif_canh_bao_series.astype(str).str.strip().dropna().unique()

        pivot_full['KH c√≥ TSBƒê kh√°c ƒë·ªãa b√†n'] = pivot_full['CIF_KH_VAY'].apply(
            lambda x: 'x' if x in cif_canh_bao else ''
        )
    else:
        pivot_full['KH c√≥ TSBƒê kh√°c ƒë·ªãa b√†n'] = ''
        if df_sol_data is None: st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu M·ª•c 17 (df_sol) ƒë·ªÉ x·ª≠ l√Ω TSBƒê kh√°c ƒë·ªãa b√†n. H√£y t·∫£i file l√™n.")
        if not dia_ban_kt_filter: st.warning("Ch∆∞a nh·∫≠p ƒë·ªãa b√†n ki·ªÉm to√°n ƒë·ªÉ x·ª≠ l√Ω TSBƒê kh√°c ƒë·ªãa b√†n. H√£y nh·∫≠p th√¥ng tin.")
    # --- K·∫øt th√∫c ph·∫ßn x·ª≠ l√Ω TSBƒê kh√°c ƒë·ªãa b√†n ---

    # X·ª≠ l√Ω c√°c giao d·ªãch gi·∫£i ng√¢n v√† t·∫•t to√°n (M·ª•c 55 & 56)
    df_gop = pd.DataFrame()
    df_count = pd.DataFrame()
    if df_55_data is not None and df_56_data is not None:
        df_tt_raw = df_55_data.copy()
        df_gn_raw = df_56_data.copy()
        
        # ƒê·∫£m b·∫£o c√°c c·ªôt t·ªìn t·∫°i tr∆∞·ªõc khi ch·ªçn
        cols_tt = ['CUSTSEQLN', 'NMLOC', 'KHE_UOC', 'SOTIENGIAINGAN', 'NGAYGN', 'NGAYDH', 'NGAY_TT', 'LOAITIEN']
        cols_gn = ['CIF', 'TEN_KHACH_HANG', 'KHE_UOC', 'SO_TIEN_GIAI_NGAN_VND', 'NGAY_GIAI_NGAN', 'NGAY_DAO_HAN', 'LOAI_TIEN_HD']
        
        df_tt = df_tt_raw[[col for col in cols_tt if col in df_tt_raw.columns]].copy()
        df_gn = df_gn_raw[[col for col in cols_gn if col in df_gn_raw.columns]].copy()

        df_tt.columns = ['CIF', 'TEN_KHACH_HANG', 'KHE_UOC', 'SO_TIEN_GIAI_NGAN_VND', 'NGAY_GIAI_NGAN', 'NGAY_DAO_HAN', 'NGAY_TT', 'LOAI_TIEN_HD']
        df_tt['GIAI_NGAN_TT'] = 'T·∫•t to√°n'
        df_tt['NGAY'] = pd.to_datetime(df_tt['NGAY_TT'], errors='coerce')
        df_tt['CIF'] = df_tt['CIF'].astype(str).str.strip()
        
        df_gn['GIAI_NGAN_TT'] = 'Gi·∫£i ng√¢n'
        df_gn['NGAY_GIAI_NGAN'] = pd.to_datetime(df_gn['NGAY_GIAI_NGAN'], format='%Y%m%d', errors='coerce')
        df_gn['NGAY_DAO_HAN'] = pd.to_datetime(df_gn['NGAY_DAO_HAN'], format='%Y%m%d', errors='coerce')
        df_gn['NGAY'] = df_gn['NGAY_GIAI_NGAN']
        df_gn['CIF'] = df_gn['CIF'].astype(str).str.strip()
        
        df_gop = pd.concat([df_tt, df_gn], ignore_index=True)
        df_gop = df_gop[df_gop['NGAY'].notna()].copy()
        df_gop = df_gop.sort_values(by=['CIF', 'NGAY', 'GIAI_NGAN_TT']).copy()
        
        df_count = df_gop.groupby(['CIF', 'NGAY', 'GIAI_NGAN_TT']).size().unstack(fill_value=0).reset_index()
        if 'Gi·∫£i ng√¢n' not in df_count.columns: df_count['Gi·∫£i ng√¢n'] = 0
        if 'T·∫•t to√°n' not in df_count.columns: df_count['T·∫•t to√°n'] = 0
        df_count['CO_CA_GN_VA_TT'] = ((df_count['Gi·∫£i ng√¢n'] > 0) & (df_count['T·∫•t to√°n'] > 0)).astype(int)
        
        ds_ca_gn_tt_series = df_count[df_count['CO_CA_GN_VA_TT'] == 1]['CIF']
        ds_ca_gn_tt = ds_ca_gn_tt_series.astype(str).str.strip().unique()
        
        pivot_full['KH c√≥ c·∫£ GNG v√† TT trong 1 ng√†y'] = pivot_full['CIF_KH_VAY'].apply(
            lambda x: 'x' if x in ds_ca_gn_tt else ''
        )
    else:
        pivot_full['KH c√≥ c·∫£ GNG v√† TT trong 1 ng√†y'] = ''
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu M·ª•c 55 ho·∫∑c M·ª•c 56 ƒë·ªÉ x·ª≠ l√Ω giao d·ªãch gi·∫£i ng√¢n/t·∫•t to√°n trong c√πng ng√†y.")

    # X·ª≠ l√Ω ch·∫≠m tr·∫£ (M·ª•c 57)
    df_delay_processed = pd.DataFrame() # Kh·ªüi t·∫°o r·ªóng
    if df_delay_data is not None:
        df_delay = df_delay_data.copy()
        # ƒê·∫£m b·∫£o t√™n c·ªôt CIF th·ªëng nh·∫•t l√† 'CIF_ID'
        if 'CIF_ID' not in df_delay.columns and 'CUSTSEQLN' in df_delay.columns:
             df_delay.rename(columns={'CUSTSEQLN': 'CIF_ID'}, inplace=True)
        
        if 'CIF_ID' in df_delay.columns:
            df_delay['CIF_ID'] = df_delay['CIF_ID'].astype(str).str.strip()
            df_delay['NGAY_DEN_HAN_TT'] = pd.to_datetime(df_delay['NGAY_DEN_HAN_TT'], errors='coerce')
            df_delay['NGAY_THANH_TOAN'] = pd.to_datetime(df_delay['NGAY_THANH_TOAN'], errors='coerce')
            
            ngay_danh_gia_cham_tra = pd.to_datetime("2025-03-31") # C√≥ th·ªÉ bi·∫øn th√†nh input
            
            df_delay['NGAY_THANH_TOAN_FILL'] = df_delay['NGAY_THANH_TOAN'].fillna(ngay_danh_gia_cham_tra)
            df_delay['SO_NGAY_CHAM_TRA'] = (df_delay['NGAY_THANH_TOAN_FILL'] - df_delay['NGAY_DEN_HAN_TT']).dt.days
            
            mask_period = df_delay['NGAY_DEN_HAN_TT'].dt.year.between(2023, 2025)
            df_delay = df_delay[mask_period & df_delay['NGAY_DEN_HAN_TT'].notna()].copy()
            
            pivot_full_temp_for_delay = pivot_full[['CIF_KH_VAY', 'D∆Ø N·ª¢', 'NHOM_NO']].rename(columns={'CIF_KH_VAY': 'CIF_ID'}).copy()
            pivot_full_temp_for_delay['CIF_ID'] = pivot_full_temp_for_delay['CIF_ID'].astype(str).str.strip()
            
            df_delay = df_delay.merge(pivot_full_temp_for_delay, on='CIF_ID', how='left')
            df_delay['NHOM_NO'] = pd.to_numeric(df_delay['NHOM_NO'], errors='coerce')
            df_delay = df_delay[df_delay['NHOM_NO'] == 1.0].copy() # Ch·ªâ x√©t n·ª£ nh√≥m 1
            
            def cap_cham_tra(days):
                if pd.isna(days): return None
                if days >= 10: return '>=10'
                if days >= 4: return '4-9'
                if days > 0: return '<4'
                return None
            
            df_delay['CAP_CHAM_TRA'] = df_delay['SO_NGAY_CHAM_TRA'].apply(cap_cham_tra)
            df_delay['NGAY_DEN_HAN_TT_DATE'] = df_delay['NGAY_DEN_HAN_TT'].dt.date
            
            df_delay.sort_values(['CIF_ID', 'NGAY_DEN_HAN_TT_DATE', 'CAP_CHAM_TRA'],
                                 key=lambda s: s.map({'>=10':0, '4-9':1, '<4':2, None: 3}) if s.name == 'CAP_CHAM_TRA' else s,
                                 inplace=True, na_position='last')
            
            df_unique_delay = df_delay.drop_duplicates(subset=['CIF_ID', 'NGAY_DEN_HAN_TT_DATE'], keep='first').copy()
            df_dem_delay = df_unique_delay.groupby(['CIF_ID', 'CAP_CHAM_TRA']).size().unstack(fill_value=0)
            
            df_dem_delay['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y'] = np.where(df_dem_delay.get('>=10', 0) > 0, 'x', '')
            df_dem_delay['KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y'] = np.where(
                (df_dem_delay.get('>=10', 0) == 0) & (df_dem_delay.get('4-9', 0) > 0), 'x', ''
            )
            df_dem_delay.index = df_dem_delay.index.astype(str) # ƒê·∫£m b·∫£o index l√† string ƒë·ªÉ merge
            pivot_full['CIF_KH_VAY'] = pivot_full['CIF_KH_VAY'].astype(str).str.strip()

            pivot_full = pivot_full.merge(
                df_dem_delay[['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y', 'KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y']],
                left_on='CIF_KH_VAY', right_index=True, how='left'
            )
            pivot_full[['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y', 'KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y']] = \
                pivot_full[['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y', 'KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y']].fillna('')
            df_delay_processed = df_delay # L∆∞u l·∫°i df ƒë√£ x·ª≠ l√Ω ƒë·ªÉ xu·∫•t n·∫øu c·∫ßn
        else:
            st.warning("C·ªôt 'CIF_ID' ho·∫∑c 'CUSTSEQLN' kh√¥ng t√¨m th·∫•y trong d·ªØ li·ªáu M·ª•c 57 (ch·∫≠m tr·∫£). B·ªè qua x·ª≠ l√Ω ch·∫≠m tr·∫£.")
            pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y'] = ''
            pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y'] = ''
    else:
        pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y'] = ''
        pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y'] = ''
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu M·ª•c 57 (ch·∫≠m tr·∫£) ƒë·ªÉ x·ª≠ l√Ω. H√£y t·∫£i file l√™n.")

    # --- Debugging: Ki·ªÉm tra df_bds_matched tr∆∞·ªõc khi tr·∫£ v·ªÅ ---
    st.subheader("‚öôÔ∏è Debug: Th√¥ng tin DataFrame TSBƒê kh√°c ƒë·ªãa b√†n (df_bds_matched_res)")
    if df_bds_matched is not None:
        st.write(f"Shape c·ªßa df_bds_matched: **{df_bds_matched.shape}**")
        if not df_bds_matched.empty:
            st.dataframe(df_bds_matched.head())
        else:
            st.info("‚ö†Ô∏è **df_bds_matched r·ªóng** sau khi x·ª≠ l√Ω. C√°c sheet li√™n quan s·∫Ω kh√¥ng ƒë∆∞·ª£c t·∫°o.")
    else:
        st.warning("‚ùå **df_bds_matched l√† None**. C√≥ l·ªói x·∫£y ra ho·∫∑c file M·ª•c 17 ch∆∞a ƒë∆∞·ª£c t·∫£i.")
    # --- K·∫øt th√∫c Debugging ---

    # Tr·∫£ v·ªÅ t·∫•t c·∫£ c√°c DataFrame c·∫ßn thi·∫øt cho vi·ªác xu·∫•t file
    return (pivot_full, df_crm4_filtered, pivot_final, pivot_merge,
            df_crm32_filtered, pivot_mucdich, df_delay_processed, df_gop, df_count, df_bds_matched,
            df_crm4_for_tsbd,cif_canh_bao_series,cif_canh_bao)


# --- Giao di·ªán ng∆∞·ªùi d√πng Streamlit ---
st.title("üìä ·ª®ng d·ª•ng X·ª≠ l√Ω D·ªØ li·ªáu CRM v√† T·∫°o B√°o c√°o Ki·ªÉm to√°n")
st.markdown("---")

with st.sidebar:
    st.header("üìÇ T·∫£i l√™n c√°c file Excel")
    st.markdown("Vui l√≤ng t·∫£i l√™n c√°c file d·ªØ li·ªáu c·∫ßn thi·∫øt:")
    
    uploaded_crm4_files = st.file_uploader("1. C√°c file CRM4 (Du_no_theo_tai_san_dam_bao_ALL.xlsx/xls)", type=["xls", "xlsx"], accept_multiple_files=True, key="crm4_uploader")
    uploaded_crm32_files = st.file_uploader("2. C√°c file CRM32 (RPT_CRM_32.xlsx/xls)", type=["xls", "xlsx"], accept_multiple_files=True, key="crm32_uploader")
    uploaded_muc_dich_file = st.file_uploader("3. File CODE_MDSDV4.xlsx", type="xlsx", key="m_dich_uploader")
    uploaded_code_tsbd_file = st.file_uploader("4. File CODE_LOAI TSBD.xlsx", type="xlsx", key="tsbd_uploader")
    uploaded_sol_file = st.file_uploader("5. File MUC 17.xlsx (D·ªØ li·ªáu SOL)", type="xlsx", key="sol_uploader")
    uploaded_giai_ngan_file = st.file_uploader("6. File Giai_ngan_tien_mat_1_ty (ho·∫∑c t∆∞∆°ng t·ª±).xlsx/xls", type=["xls","xlsx"], key="giai_ngan_uploader")
    uploaded_55_file = st.file_uploader("7. File Muc55 (T·∫•t to√°n).xlsx", type="xlsx", key="muc55_uploader")
    uploaded_56_file = st.file_uploader("8. File Muc56 (Gi·∫£i ng√¢n).xlsx", type="xlsx", key="muc56_uploader")
    uploaded_delay_file = st.file_uploader("9. File Muc57 (Ch·∫≠m tr·∫£).xlsx", type="xlsx", key="delay_uploader")

    st.header("‚öôÔ∏è Th√¥ng s·ªë t√πy ch·ªçn")
    st.markdown("Nh·∫≠p th√¥ng tin chi nh√°nh v√† ƒë·ªãa b√†n ƒë·ªÉ l·ªçc v√† ph√¢n t√≠ch:")
    chi_nhanh_input = st.text_input("Nh·∫≠p t√™n chi nh√°nh ho·∫∑c m√£ SOL (v√≠ d·ª•: HANOI ho·∫∑c 001):", key="chi_nhanh_val").strip().upper()
    dia_ban_kt_input = st.text_input("Nh·∫≠p t·ªânh/th√†nh ki·ªÉm to√°n (v√≠ d·ª•: B·∫°c Li√™u):", key="dia_ban_val").strip().lower()

st.markdown("---")

# N√∫t b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu v√† T·∫°o b√°o c√°o", key="process_button"):
    # Ki·ªÉm tra c√°c file b·∫Øt bu·ªôc ph·∫£i c√≥
    required_files_present = all([
        uploaded_crm4_files, uploaded_crm32_files, uploaded_muc_dich_file,
        uploaded_code_tsbd_file, uploaded_55_file, uploaded_56_file, uploaded_delay_file
    ])

    if not required_files_present:
        st.error("‚ùå Vui l√≤ng t·∫£i l√™n t·∫•t c·∫£ c√°c file b·∫Øt bu·ªôc: CRM4, CRM32, CODE_MDSDV4, CODE_LOAI_TSBD, Muc55, Muc56, Muc57.")
    elif not chi_nhanh_input:
        st.error("‚ùå Vui l√≤ng nh·∫≠p **t√™n chi nh√°nh ho·∫∑c m√£ SOL** ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω.")
    else:
        with st.spinner("‚è≥ ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t v√†i ph√∫t. Vui l√≤ng ch·ªù."):
            # T·∫£i d·ªØ li·ªáu t·ª´ c√°c file ƒë√£ upload
            df_crm4_raw = load_multiple_excel(uploaded_crm4_files)
            df_crm32_raw = load_multiple_excel(uploaded_crm32_files)
            df_muc_dich_data = load_excel(uploaded_muc_dich_file)
            df_code_tsbd_data = load_excel(uploaded_code_tsbd_file)
            df_sol_data = load_excel(uploaded_sol_file) # ƒê√¢y l√† file MUC 17
            df_giai_ngan_data = load_excel(uploaded_giai_ngan_file)
            df_55_data = load_excel(uploaded_55_file)
            df_56_data = load_excel(uploaded_56_file)
            df_delay_data = load_excel(uploaded_delay_file)

            # Ki·ªÉm tra l·∫°i sau khi t·∫£i li·ªáu li·ªáu c√≥ b·ªã l·ªói ƒë·ªçc kh√¥ng
            if df_crm4_raw is None or df_crm32_raw is None or \
               df_muc_dich_data is None or df_code_tsbd_data is None or \
               df_55_data is None or df_56_data is None or df_delay_data is None:
                st.error("‚ùå M·ªôt ho·∫∑c nhi·ªÅu file b·∫Øt bu·ªôc kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng file ho·∫∑c n·ªôi dung.")
            else:
                try:
                    # G·ªçi h√†m x·ª≠ l√Ω ch√≠nh
                    results = process_crm_data(
                        df_crm4_raw, df_crm32_raw, df_muc_dich_data, df_code_tsbd_data,
                        df_sol_data, df_giai_ngan_data, df_55_data, df_56_data, df_delay_data,
                        chi_nhanh_input, dia_ban_kt_input
                    )

                    if results and all(r is not None for r in results): # Ki·ªÉm tra t·∫•t c·∫£ c√°c k·∫øt qu·∫£ tr·∫£ v·ªÅ kh√¥ng ph·∫£i l√† None
                        # Gi·∫£i n√©n (unpack) c√°c DataFrame k·∫øt qu·∫£
                        (pivot_full_res, df_crm4_filtered_res, pivot_final_res, pivot_merge_res,
                         df_crm32_filtered_res, pivot_mucdich_res, df_delay_res, df_gop_res,
                         df_count_res, df_bds_matched_res, df_crm4_for_tsbd_res) = results

                        st.success("üéâ X·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t! B·∫°n c√≥ th·ªÉ xem tr∆∞·ªõc k·∫øt qu·∫£ v√† t·∫£i file.")

                        st.subheader("üìä Xem tr∆∞·ªõc B·∫£ng t·ªïng h·ª£p kh√°ch h√†ng (KQ_KH)")
                        if not pivot_full_res.empty:
                            st.dataframe(pivot_full_res.head(10)) # Hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu
                        else:
                            st.warning("‚ö†Ô∏è B·∫£ng k·∫øt qu·∫£ ch√≠nh (KQ_KH) r·ªóng sau khi x·ª≠ l√Ω.")

                        # T·∫°o file Excel trong b·ªô nh·ªõ
                        output = BytesIO()
                        with pd.ExcelWriter(output, engine='openpyxl') as writer:
                            # Ghi t·ª´ng DataFrame v√†o m·ªôt sheet ri√™ng
                            if not df_crm4_filtered_res.empty: df_crm4_filtered_res.to_excel(writer, sheet_name='df_crm4_LOAI_TS', index=False)
                            if not pivot_final_res.empty: pivot_final_res.to_excel(writer, sheet_name='KQ_CRM4', index=False)
                            if not pivot_merge_res.empty: pivot_merge_res.to_excel(writer, sheet_name='Pivot_crm4', index=False)
                            if not df_crm32_filtered_res.empty: df_crm32_filtered_res.to_excel(writer, sheet_name='df_crm32_MUC_DICH', index=False)
                            if not pivot_full_res.empty: pivot_full_res.to_excel(writer, sheet_name='KQ_KH', index=False)
                            if not pivot_mucdich_res.empty: pivot_mucdich_res.to_excel(writer, sheet_name='Pivot_crm32', index=False)
                            if not df_delay_res.empty: df_delay_res.to_excel(writer, sheet_name='tieu chi 4 (cham tra)', index=False)
                            if not df_gop_res.empty: df_gop_res.to_excel(writer, sheet_name='tieu chi 3 (gop GN TT)', index=False)
                            if not df_count_res.empty: df_count_res.to_excel(writer, sheet_name='tieu chi 3 (dem GN TT)', index=False)
                            if not cif_canh_bao_series.empty: cif_canh_bao_series.to_excel(writer, sheet_name='tieu chi 2_ (dem GN TT)', index=False)
                            if not cif_canh_bao.empty: cif_canh_bao.to_excel(writer, sheet_name='tieu chi 2_ (dem GN TT)', index=False)    
                            # df_bds_matched_res: TSBƒê kh√°c ƒë·ªãa b√†n
                            if not df_bds_matched_res.empty:
                                df_bds_matched_res.to_excel(writer, sheet_name='tieu chi 2 (BDS khac DB)', index=False)
                                df_bds_matched_res.to_excel(writer, sheet_name='tieu chi 2_dot3', index=False)
                            else:
                                st.info("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu TSBƒê kh√°c ƒë·ªãa b√†n ƒë·ªÉ xu·∫•t ra sheet 'tieu chi 2 (BDS khac DB)' v√† 'tieu chi 2_dot3'.")

                            # df_crm4_for_tsbd_res: TSBƒê qu√° h·∫°n ƒë·ªãnh gi√°
                            if not df_crm4_for_tsbd_res.empty:
                                df_crm4_for_tsbd_res.to_excel(writer, sheet_name='tieu chi 1)', index=False)
                            else:
                                st.info("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu TSBƒê qu√° h·∫°n ƒë·ªãnh gi√° ƒë·ªÉ xu·∫•t ra sheet 'tieu chi 1)'.")


                        excel_data = output.getvalue()

                        # N√∫t t·∫£i xu·ªëng file Excel
                        if excel_data:
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng file Excel k·∫øt qu·∫£ (KQ_XuLy.xlsx)",
                                data=excel_data,
                                file_name="KQ_XuLy_CRM.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                            st.balloons() # Hi·ªáu ·ª©ng vui m·∫Øt khi ho√†n th√†nh
                        else:
                            st.warning("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t ra file Excel. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·∫ßu v√†o v√† ƒëi·ªÅu ki·ªán l·ªçc.")
                    else:
                        st.error("‚ùå X·ª≠ l√Ω d·ªØ li·ªáu kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu ƒë·∫ßu v√†o v√† c√°c th√¥ng s·ªë.")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
                    st.exception(e) # Hi·ªÉn th·ªã stack trace ƒë·ªÉ debug
else:
    st.info("üí° B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫£i l√™n c√°c file c·∫ßn thi·∫øt v√† nh·∫≠p th√¥ng tin ·ªü thanh b√™n, sau ƒë√≥ nh·∫•n n√∫t 'B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu'.")
